// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using RX.Nyss.Data;

#nullable disable

namespace RX.Nyss.Data.Migrations
{
    [DbContext(typeof(NyssContext))]
    [Migration("20231010124845_UpdateGatewaySettingTable")]
    partial class UpdateGatewaySettingTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("nyss")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RX.Nyss.Data.Models.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClosedById")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DismissedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EscalatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EscalatedById")
                        .HasColumnType("int");

                    b.Property<string>("EscalatedOutcome")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProjectHealthRiskId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RecipientsNotifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ClosedById");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DismissedById");

                    b.HasIndex("EscalatedById");

                    b.HasIndex("ProjectHealthRiskId");

                    b.HasIndex("Status");

                    b.ToTable("Alerts", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertEventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlertEventSubtypeId")
                        .HasColumnType("int");

                    b.Property<int>("AlertEventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AlertId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoggedById")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("AlertEventSubtypeId");

                    b.HasIndex("AlertEventTypeId");

                    b.HasIndex("AlertId");

                    b.HasIndex("LoggedById");

                    b.ToTable("AlertEventLogs", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertEventSubtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AlertEventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AlertEventTypeId");

                    b.ToTable("AlertEventSubtypes", "nyss");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlertEventTypeId = 1,
                            Name = "Investigated"
                        },
                        new
                        {
                            Id = 2,
                            AlertEventTypeId = 1,
                            Name = "NotInvestigated"
                        },
                        new
                        {
                            Id = 3,
                            AlertEventTypeId = 1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 4,
                            AlertEventTypeId = 4,
                            Name = "CasePositiveLab"
                        },
                        new
                        {
                            Id = 5,
                            AlertEventTypeId = 4,
                            Name = "PresumedCasePositiveClinical"
                        },
                        new
                        {
                            Id = 6,
                            AlertEventTypeId = 4,
                            Name = "PresumedCasePositiveUnknown"
                        },
                        new
                        {
                            Id = 7,
                            AlertEventTypeId = 4,
                            Name = "CaseNegativeLab"
                        },
                        new
                        {
                            Id = 8,
                            AlertEventTypeId = 4,
                            Name = "PresumedCaseNegativeClinical"
                        },
                        new
                        {
                            Id = 9,
                            AlertEventTypeId = 4,
                            Name = "PresumedCaseNegativeUnknown"
                        },
                        new
                        {
                            Id = 10,
                            AlertEventTypeId = 4,
                            Name = "Recovered"
                        },
                        new
                        {
                            Id = 11,
                            AlertEventTypeId = 4,
                            Name = "Deceased"
                        },
                        new
                        {
                            Id = 12,
                            AlertEventTypeId = 6,
                            Name = "ImmunizationCampaign"
                        },
                        new
                        {
                            Id = 13,
                            AlertEventTypeId = 6,
                            Name = "HealthMessagesAwarenessRaising"
                        },
                        new
                        {
                            Id = 14,
                            AlertEventTypeId = 6,
                            Name = "Referral"
                        },
                        new
                        {
                            Id = 15,
                            AlertEventTypeId = 6,
                            Name = "Isolation"
                        },
                        new
                        {
                            Id = 16,
                            AlertEventTypeId = 6,
                            Name = "ProvidedORS"
                        },
                        new
                        {
                            Id = 17,
                            AlertEventTypeId = 6,
                            Name = "AnimalsDisposed"
                        },
                        new
                        {
                            Id = 18,
                            AlertEventTypeId = 6,
                            Name = "SafeDignifiedBurials"
                        },
                        new
                        {
                            Id = 19,
                            AlertEventTypeId = 6,
                            Name = "CommunityMeeting"
                        },
                        new
                        {
                            Id = 20,
                            AlertEventTypeId = 6,
                            Name = "AssistedInvestigation"
                        },
                        new
                        {
                            Id = 21,
                            AlertEventTypeId = 6,
                            Name = "CleanupFogging"
                        },
                        new
                        {
                            Id = 22,
                            AlertEventTypeId = 6,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AlertEventTypes", "nyss");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Investigation"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Outcome"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Summary"
                        },
                        new
                        {
                            Id = 6,
                            Name = "PublicHealthActionTaken"
                        });
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertNotHandledNotificationRecipient", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AlertNotHandledNotificationRecipients", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertNotificationRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GatewayModemId")
                        .HasColumnType("int");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GatewayModemId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AlertNotificationRecipients", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertReport", b =>
                {
                    b.Property<int>("AlertId")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("AlertId", "ReportId");

                    b.HasIndex("ReportId");

                    b.ToTable("AlertReports", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountThreshold")
                        .HasColumnType("int");

                    b.Property<int?>("DaysThreshold")
                        .HasColumnType("int");

                    b.Property<int?>("KilometersThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AlertRules", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique();

                    b.ToTable("ApplicationLanguages", "nyss");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "English",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Français",
                            LanguageCode = "fr"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Español",
                            LanguageCode = "es"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "العربية",
                            LanguageCode = "ar"
                        });
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ContentLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique();

                    b.ToTable("ContentLanguages", "nyss");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "English",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Français",
                            LanguageCode = "fr"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Español",
                            LanguageCode = "es"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "العربية",
                            LanguageCode = "ar"
                        });
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries", "nyss");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "AX",
                            Name = "Åland Islands"
                        },
                        new
                        {
                            Id = 154,
                            CountryCode = "AN",
                            Name = "Netherlands Antilles"
                        },
                        new
                        {
                            Id = 155,
                            CountryCode = "NC",
                            Name = "New Caledonia"
                        },
                        new
                        {
                            Id = 156,
                            CountryCode = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 157,
                            CountryCode = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 158,
                            CountryCode = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 159,
                            CountryCode = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 160,
                            CountryCode = "NU",
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 161,
                            CountryCode = "NF",
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Id = 162,
                            CountryCode = "MP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = 163,
                            CountryCode = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 164,
                            CountryCode = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 165,
                            CountryCode = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 153,
                            CountryCode = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 166,
                            CountryCode = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 168,
                            CountryCode = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 169,
                            CountryCode = "PG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 170,
                            CountryCode = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 171,
                            CountryCode = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 172,
                            CountryCode = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 173,
                            CountryCode = "PN",
                            Name = "Pitcairn"
                        },
                        new
                        {
                            Id = 174,
                            CountryCode = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 175,
                            CountryCode = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 176,
                            CountryCode = "PR",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 177,
                            CountryCode = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 178,
                            CountryCode = "RE",
                            Name = "Reunion"
                        },
                        new
                        {
                            Id = 179,
                            CountryCode = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 167,
                            CountryCode = "PS",
                            Name = "Palestinian Territory, Occupied"
                        },
                        new
                        {
                            Id = 180,
                            CountryCode = "RU",
                            Name = "Russian Federation"
                        },
                        new
                        {
                            Id = 152,
                            CountryCode = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 150,
                            CountryCode = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 124,
                            CountryCode = "LY",
                            Name = "Libyan Arab Jamahiriya"
                        },
                        new
                        {
                            Id = 125,
                            CountryCode = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 126,
                            CountryCode = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 127,
                            CountryCode = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 128,
                            CountryCode = "MO",
                            Name = "Macao"
                        },
                        new
                        {
                            Id = 129,
                            CountryCode = "MK",
                            Name = "Macedonia, The Former Yugoslav Republic of"
                        },
                        new
                        {
                            Id = 130,
                            CountryCode = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 131,
                            CountryCode = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 132,
                            CountryCode = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 133,
                            CountryCode = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 134,
                            CountryCode = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 135,
                            CountryCode = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 151,
                            CountryCode = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 136,
                            CountryCode = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 138,
                            CountryCode = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 139,
                            CountryCode = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 140,
                            CountryCode = "YT",
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 141,
                            CountryCode = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 142,
                            CountryCode = "FM",
                            Name = "Micronesia, Federated States of"
                        },
                        new
                        {
                            Id = 143,
                            CountryCode = "MD",
                            Name = "Moldova, Republic of"
                        },
                        new
                        {
                            Id = 144,
                            CountryCode = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 145,
                            CountryCode = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 146,
                            CountryCode = "MS",
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = 147,
                            CountryCode = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 148,
                            CountryCode = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 149,
                            CountryCode = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 137,
                            CountryCode = "MQ",
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = 181,
                            CountryCode = "RW",
                            Name = "RWANDA"
                        },
                        new
                        {
                            Id = 182,
                            CountryCode = "SH",
                            Name = "Saint Helena"
                        },
                        new
                        {
                            Id = 183,
                            CountryCode = "KN",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 215,
                            CountryCode = "TL",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = 216,
                            CountryCode = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 217,
                            CountryCode = "TK",
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 218,
                            CountryCode = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 219,
                            CountryCode = "TT",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 220,
                            CountryCode = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 221,
                            CountryCode = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 222,
                            CountryCode = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 223,
                            CountryCode = "TC",
                            Name = "Turks and Caicos Islands"
                        },
                        new
                        {
                            Id = 224,
                            CountryCode = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 225,
                            CountryCode = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 226,
                            CountryCode = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 214,
                            CountryCode = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 227,
                            CountryCode = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 229,
                            CountryCode = "US",
                            Name = "United States"
                        },
                        new
                        {
                            Id = 230,
                            CountryCode = "UM",
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            Id = 231,
                            CountryCode = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 232,
                            CountryCode = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 233,
                            CountryCode = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 234,
                            CountryCode = "VE",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 235,
                            CountryCode = "VN",
                            Name = "Viet Nam"
                        },
                        new
                        {
                            Id = 236,
                            CountryCode = "VG",
                            Name = "Virgin Islands, British"
                        },
                        new
                        {
                            Id = 237,
                            CountryCode = "VI",
                            Name = "Virgin Islands, U.S."
                        },
                        new
                        {
                            Id = 238,
                            CountryCode = "WF",
                            Name = "Wallis and Futuna"
                        },
                        new
                        {
                            Id = 239,
                            CountryCode = "EH",
                            Name = "Western Sahara"
                        },
                        new
                        {
                            Id = 240,
                            CountryCode = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 228,
                            CountryCode = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 213,
                            CountryCode = "TZ",
                            Name = "Tanzania, United Republic of"
                        },
                        new
                        {
                            Id = 212,
                            CountryCode = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 211,
                            CountryCode = "TW",
                            Name = "Taiwan, Province of China"
                        },
                        new
                        {
                            Id = 184,
                            CountryCode = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 185,
                            CountryCode = "PM",
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 186,
                            CountryCode = "VC",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = 187,
                            CountryCode = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 188,
                            CountryCode = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 189,
                            CountryCode = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 190,
                            CountryCode = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 191,
                            CountryCode = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 192,
                            CountryCode = "CS",
                            Name = "Serbia and Montenegro"
                        },
                        new
                        {
                            Id = 193,
                            CountryCode = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 194,
                            CountryCode = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 195,
                            CountryCode = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 196,
                            CountryCode = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 197,
                            CountryCode = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 198,
                            CountryCode = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 199,
                            CountryCode = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 200,
                            CountryCode = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 201,
                            CountryCode = "GS",
                            Name = "South Georgia and the South Sandwich Islands"
                        },
                        new
                        {
                            Id = 202,
                            CountryCode = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 203,
                            CountryCode = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 204,
                            CountryCode = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 205,
                            CountryCode = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 206,
                            CountryCode = "SJ",
                            Name = "Svalbard and Jan Mayen"
                        },
                        new
                        {
                            Id = 207,
                            CountryCode = "SZ",
                            Name = "Swaziland"
                        },
                        new
                        {
                            Id = 208,
                            CountryCode = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 209,
                            CountryCode = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 210,
                            CountryCode = "SY",
                            Name = "Syrian Arab Republic"
                        },
                        new
                        {
                            Id = 123,
                            CountryCode = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 122,
                            CountryCode = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 121,
                            CountryCode = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 120,
                            CountryCode = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 33,
                            CountryCode = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 34,
                            CountryCode = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 35,
                            CountryCode = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 36,
                            CountryCode = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 37,
                            CountryCode = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 38,
                            CountryCode = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 39,
                            CountryCode = "CV",
                            Name = "Cape Verde"
                        },
                        new
                        {
                            Id = 40,
                            CountryCode = "KY",
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            Id = 41,
                            CountryCode = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = 42,
                            CountryCode = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 43,
                            CountryCode = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 44,
                            CountryCode = "CN",
                            Name = "China"
                        },
                        new
                        {
                            Id = 32,
                            CountryCode = "BN",
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            Id = 45,
                            CountryCode = "CX",
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Id = 47,
                            CountryCode = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 48,
                            CountryCode = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = 49,
                            CountryCode = "CG",
                            Name = "Congo"
                        },
                        new
                        {
                            Id = 50,
                            CountryCode = "CD",
                            Name = "Congo, The Democratic Republic of the"
                        },
                        new
                        {
                            Id = 51,
                            CountryCode = "CK",
                            Name = "Cook Islands"
                        },
                        new
                        {
                            Id = 52,
                            CountryCode = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 53,
                            CountryCode = "CI",
                            Name = "Cote D\"Ivoire"
                        },
                        new
                        {
                            Id = 54,
                            CountryCode = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 55,
                            CountryCode = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 56,
                            CountryCode = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 57,
                            CountryCode = "CZ",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 58,
                            CountryCode = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 46,
                            CountryCode = "CC",
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            Id = 31,
                            CountryCode = "IO",
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            Id = 30,
                            CountryCode = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 29,
                            CountryCode = "BV",
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "AS",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 5,
                            CountryCode = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 6,
                            CountryCode = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 7,
                            CountryCode = "AI",
                            Name = "Anguilla"
                        },
                        new
                        {
                            Id = 8,
                            CountryCode = "AQ",
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 9,
                            CountryCode = "AG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 10,
                            CountryCode = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 11,
                            CountryCode = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 12,
                            CountryCode = "AW",
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 13,
                            CountryCode = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 14,
                            CountryCode = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 15,
                            CountryCode = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 16,
                            CountryCode = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = 17,
                            CountryCode = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 18,
                            CountryCode = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 19,
                            CountryCode = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 20,
                            CountryCode = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 21,
                            CountryCode = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 22,
                            CountryCode = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 23,
                            CountryCode = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 24,
                            CountryCode = "BM",
                            Name = "Bermuda"
                        },
                        new
                        {
                            Id = 25,
                            CountryCode = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 26,
                            CountryCode = "BO",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 27,
                            CountryCode = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 28,
                            CountryCode = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 59,
                            CountryCode = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 241,
                            CountryCode = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 60,
                            CountryCode = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 62,
                            CountryCode = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 94,
                            CountryCode = "HM",
                            Name = "Heard Island and Mcdonald Islands"
                        },
                        new
                        {
                            Id = 95,
                            CountryCode = "VA",
                            Name = "Holy See (Vatican City State)"
                        },
                        new
                        {
                            Id = 96,
                            CountryCode = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 97,
                            CountryCode = "HK",
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 98,
                            CountryCode = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 99,
                            CountryCode = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 100,
                            CountryCode = "IN",
                            Name = "India"
                        },
                        new
                        {
                            Id = 101,
                            CountryCode = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 102,
                            CountryCode = "IR",
                            Name = "Iran, Islamic Republic Of"
                        },
                        new
                        {
                            Id = 103,
                            CountryCode = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 104,
                            CountryCode = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 105,
                            CountryCode = "IM",
                            Name = "Isle of Man"
                        },
                        new
                        {
                            Id = 93,
                            CountryCode = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 106,
                            CountryCode = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 108,
                            CountryCode = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 109,
                            CountryCode = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 110,
                            CountryCode = "JE",
                            Name = "Jersey"
                        },
                        new
                        {
                            Id = 111,
                            CountryCode = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 112,
                            CountryCode = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 113,
                            CountryCode = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 114,
                            CountryCode = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 115,
                            CountryCode = "KP",
                            Name = "Korea, Democratic People\"S Republic of"
                        },
                        new
                        {
                            Id = 116,
                            CountryCode = "KR",
                            Name = "Korea, Republic of"
                        },
                        new
                        {
                            Id = 117,
                            CountryCode = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 118,
                            CountryCode = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 119,
                            CountryCode = "LA",
                            Name = "Lao People\"S Democratic Republic"
                        },
                        new
                        {
                            Id = 107,
                            CountryCode = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 92,
                            CountryCode = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 91,
                            CountryCode = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 90,
                            CountryCode = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 63,
                            CountryCode = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 64,
                            CountryCode = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 65,
                            CountryCode = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 66,
                            CountryCode = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 67,
                            CountryCode = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 68,
                            CountryCode = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 69,
                            CountryCode = "FK",
                            Name = "Falkland Islands (Malvinas)"
                        },
                        new
                        {
                            Id = 70,
                            CountryCode = "FO",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            Id = 71,
                            CountryCode = "FJ",
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 72,
                            CountryCode = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 73,
                            CountryCode = "FR",
                            Name = "France"
                        },
                        new
                        {
                            Id = 74,
                            CountryCode = "GF",
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = 75,
                            CountryCode = "PF",
                            Name = "French Polynesia"
                        },
                        new
                        {
                            Id = 76,
                            CountryCode = "TF",
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            Id = 77,
                            CountryCode = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 78,
                            CountryCode = "GM",
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = 79,
                            CountryCode = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 80,
                            CountryCode = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 81,
                            CountryCode = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 82,
                            CountryCode = "GI",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 83,
                            CountryCode = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 84,
                            CountryCode = "GL",
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = 85,
                            CountryCode = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 86,
                            CountryCode = "GP",
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = 87,
                            CountryCode = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 88,
                            CountryCode = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 89,
                            CountryCode = "GG",
                            Name = "Guernsey"
                        },
                        new
                        {
                            Id = 61,
                            CountryCode = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 242,
                            CountryCode = "ZW",
                            Name = "Zimbabwe"
                        },
                        new
                        {
                            Id = 243,
                            CountryCode = "SS",
                            Name = "South Sudan"
                        });
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.DataCollector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("BirthGroupDecade")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataCollectorType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deployed")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("HeadSupervisorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInTrainingMode")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalPhoneNumber");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DataCollectorType");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("HeadSupervisorId");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("DataCollectors", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.DataCollectorLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DataCollectorId")
                        .HasColumnType("int");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<int>("VillageId")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataCollectorId");

                    b.HasIndex("VillageId");

                    b.HasIndex("ZoneId");

                    b.ToTable("DataCollectorLocations", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.DataCollectorNotDeployed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DataCollectorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DataCollectorId");

                    b.ToTable("DataCollectorNotDeployedDates", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.EidsrConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApiBaseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfOnsetDataElementId")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("EventTypeDataElementId")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("GenderDataElementId")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("LocationDataElementId")
                        .HasColumnType("varchar(256)");

                    b.Property<int>("NationalSocietyId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberDataElementId")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("SuspectedDiseaseDataElementId")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("TrackerProgramId")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NationalSocietyId")
                        .IsUnique();

                    b.ToTable("EidsrConfiguration", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.EidsrOrganisationUnits", b =>
                {
                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("OrganisationUnitId")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("OrganisationUnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.ToTable("EidsrOrganisationUnits", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.GatewayModem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GatewaySettingId")
                        .HasColumnType("int");

                    b.Property<int>("ModemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GatewaySettingId");

                    b.ToTable("GatewayModems", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.GatewaySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GatewayType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IotHubDeviceName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NationalSocietyId")
                        .HasColumnType("int");

                    b.Property<string>("TelerivetProjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelerivetSendSmsApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("NationalSocietyId");

                    b.ToTable("GatewaySettings", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HeadSupervisorUserAlertRecipient", b =>
                {
                    b.Property<int>("HeadSupervisorId")
                        .HasColumnType("int");

                    b.Property<int>("AlertNotificationRecipientId")
                        .HasColumnType("int");

                    b.HasKey("HeadSupervisorId", "AlertNotificationRecipientId");

                    b.HasIndex("AlertNotificationRecipientId");

                    b.ToTable("HeadSupervisorUserAlertRecipients", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HeadSupervisorUserProject", b =>
                {
                    b.Property<int>("HeadSupervisorUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("HeadSupervisorUserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("HeadSupervisorUserProjects", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HealthRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlertRuleId")
                        .HasColumnType("int");

                    b.Property<int>("HealthRiskCode")
                        .HasColumnType("int");

                    b.Property<string>("HealthRiskType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AlertRuleId");

                    b.HasIndex("HealthRiskType");

                    b.ToTable("HealthRisks", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HealthRiskLanguageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CaseDefinition")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ContentLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("FeedbackMessage")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<int>("HealthRiskId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ContentLanguageId");

                    b.HasIndex("HealthRiskId");

                    b.ToTable("HealthRiskLanguageContents", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HealthRiskSuspectedDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HealthRiskId")
                        .HasColumnType("int");

                    b.Property<int>("SuspectedDiseaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthRiskId");

                    b.HasIndex("SuspectedDiseaseId");

                    b.ToTable("HealthRiskSuspectedDisease", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Localization", b =>
                {
                    b.Property<int>("ApplicationLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ApplicationLanguageId", "Key");

                    b.ToTable("Localizations", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.LocalizedTemplate", b =>
                {
                    b.Property<int>("ApplicationLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("ApplicationLanguageId", "Key");

                    b.ToTable("LocalizedTemplates", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.NationalSociety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContentLanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictCustomName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EnableEidsrIntegration")
                        .HasColumnType("bit");

                    b.Property<int>("EpiWeekStartDay")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegionCustomName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VillageCustomName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZoneCustomName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ContentLanguageId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DefaultOrganizationId");

                    b.HasIndex("IsArchived");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("StartDate");

                    b.ToTable("NationalSocieties", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.NationalSocietyConsent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConsentDocument")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ConsentedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConsentedUntil")
                        .HasColumnType("datetime2");

                    b.Property<int>("NationalSocietyId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("NationalSocietyConsents", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("HeadManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NationalSocietyId")
                        .HasColumnType("int");

                    b.Property<int?>("PendingHeadManagerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeadManagerId");

                    b.HasIndex("NationalSocietyId");

                    b.HasIndex("PendingHeadManagerId");

                    b.HasIndex("Name", "NationalSocietyId")
                        .IsUnique();

                    b.ToTable("Organizations", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AllowMultipleOrganizations")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NationalSocietyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NationalSocietyId");

                    b.ToTable("Projects", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ProjectErrorMessage", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("MessageKey")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId", "MessageKey");

                    b.ToTable("ProjectErrorMessages", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ProjectHealthRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlertRuleId")
                        .HasColumnType("int");

                    b.Property<string>("CaseDefinition")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FeedbackMessage")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<int>("HealthRiskId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlertRuleId");

                    b.HasIndex("HealthRiskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectHealthRisks", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ProjectHealthRiskAlertRecipient", b =>
                {
                    b.Property<int>("ProjectHealthRiskId")
                        .HasColumnType("int");

                    b.Property<int>("AlertNotificationRecipientId")
                        .HasColumnType("int");

                    b.HasKey("ProjectHealthRiskId", "AlertNotificationRecipientId");

                    b.HasIndex("AlertNotificationRecipientId");

                    b.ToTable("ProjectHealthRiskAlertRecipients", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ProjectOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId", "OrganizationId")
                        .IsUnique();

                    b.ToTable("ProjectOrganizations", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.RawReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DataCollectorId")
                        .HasColumnType("int");

                    b.Property<int?>("ErrorType")
                        .HasColumnType("int");

                    b.Property<int?>("IncomingMessageId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsTraining")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MarkedAsCorrectedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarkedAsCorrectedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModemNumber")
                        .HasColumnType("int");

                    b.Property<int?>("NationalSocietyId")
                        .HasColumnType("int");

                    b.Property<int?>("OutgoingMessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("Sender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Text")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("Timestamp")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int?>("VillageId")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataCollectorId");

                    b.HasIndex("NationalSocietyId");

                    b.HasIndex("ReportId")
                        .IsUnique()
                        .HasFilter("[ReportId] IS NOT NULL");

                    b.HasIndex("VillageId");

                    b.HasIndex("ZoneId");

                    b.ToTable("RawReports", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NationalSocietyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NationalSocietyId");

                    b.ToTable("Regions", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AcceptedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CorrectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CorrectedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DataCollectorId")
                        .HasColumnType("int");

                    b.Property<int>("EpiWeek")
                        .HasColumnType("int");

                    b.Property<int>("EpiYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2020);

                    b.Property<bool>("IsTraining")
                        .HasColumnType("bit");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProjectHealthRiskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RejectedById")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportGroupLabel")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ReportedCaseCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResetAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResetById")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedById");

                    b.HasIndex("CorrectedById");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DataCollectorId");

                    b.HasIndex("EpiWeek");

                    b.HasIndex("ProjectHealthRiskId");

                    b.HasIndex("ReceivedAt");

                    b.HasIndex("RejectedById");

                    b.HasIndex("ReportGroupLabel");

                    b.HasIndex("ResetById");

                    b.ToTable("Reports", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SupervisorUserAlertRecipient", b =>
                {
                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<int>("AlertNotificationRecipientId")
                        .HasColumnType("int");

                    b.HasKey("SupervisorId", "AlertNotificationRecipientId");

                    b.HasIndex("AlertNotificationRecipientId");

                    b.ToTable("SupervisorUserAlertRecipients", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SupervisorUserProject", b =>
                {
                    b.Property<int>("SupervisorUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SupervisorUserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SupervisorUserProjects", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SuspectedDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SuspectedDiseaseCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SuspectedDisease", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SuspectedDiseaseLanguageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContentLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SuspectedDiseaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentLanguageId");

                    b.HasIndex("SuspectedDiseaseId");

                    b.ToTable("SuspectedDiseaseLanguageContent", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.TechnicalAdvisorUserGatewayModem", b =>
                {
                    b.Property<int>("TechnicalAdvisorUserId")
                        .HasColumnType("int");

                    b.Property<int>("GatewayModemId")
                        .HasColumnType("int");

                    b.HasKey("TechnicalAdvisorUserId", "GatewayModemId");

                    b.HasIndex("GatewayModemId");

                    b.ToTable("TechnicalAdvisorUserGatewayModems", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ApplicationLanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Organization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationLanguageId");

                    b.HasIndex("EmailAddress");

                    b.ToTable("Users", "nyss");

                    b.HasDiscriminator<string>("Role");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.UserNationalSociety", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("NationalSocietyId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "NationalSocietyId");

                    b.HasIndex("NationalSocietyId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserNationalSocieties", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Village", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Villages", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VillageId");

                    b.ToTable("Zones", "nyss");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AdministratorUser", b =>
                {
                    b.HasBaseType("RX.Nyss.Data.Models.User");

                    b.HasDiscriminator().HasValue("Administrator");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationLanguageId = 1,
                            EmailAddress = "admin@domain.com",
                            IdentityUserId = "9c1071c1-fa69-432a-9cd0-2c4baa703a67",
                            IsFirstLogin = false,
                            Name = "Administrator",
                            PhoneNumber = "",
                            Role = "Administrator"
                        });
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.CoordinatorUser", b =>
                {
                    b.HasBaseType("RX.Nyss.Data.Models.User");

                    b.HasDiscriminator().HasValue("Coordinator");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.DataConsumerUser", b =>
                {
                    b.HasBaseType("RX.Nyss.Data.Models.User");

                    b.HasDiscriminator().HasValue("DataConsumer");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.GlobalCoordinatorUser", b =>
                {
                    b.HasBaseType("RX.Nyss.Data.Models.User");

                    b.HasDiscriminator().HasValue("GlobalCoordinator");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HeadSupervisorUser", b =>
                {
                    b.HasBaseType("RX.Nyss.Data.Models.User");

                    b.Property<int>("CurrentProjectId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("CurrentProjectId");

                    b.Property<int>("DecadeOfBirth")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("DecadeOfBirth");

                    b.Property<int?>("ModemId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ModemId");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Sex");

                    b.HasIndex("CurrentProjectId");

                    b.HasIndex("ModemId");

                    b.HasDiscriminator().HasValue("HeadSupervisor");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ManagerUser", b =>
                {
                    b.HasBaseType("RX.Nyss.Data.Models.User");

                    b.Property<int?>("ModemId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ModemId");

                    b.HasIndex("ModemId");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SupervisorUser", b =>
                {
                    b.HasBaseType("RX.Nyss.Data.Models.User");

                    b.Property<int>("CurrentProjectId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("CurrentProjectId");

                    b.Property<int>("DecadeOfBirth")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("DecadeOfBirth");

                    b.Property<int?>("HeadSupervisorId")
                        .HasColumnType("int");

                    b.Property<int?>("ModemId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ModemId");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Sex");

                    b.HasIndex("CurrentProjectId");

                    b.HasIndex("HeadSupervisorId");

                    b.HasIndex("ModemId");

                    b.HasDiscriminator().HasValue("Supervisor");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.TechnicalAdvisorUser", b =>
                {
                    b.HasBaseType("RX.Nyss.Data.Models.User");

                    b.HasDiscriminator().HasValue("TechnicalAdvisor");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Alert", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.User", "ClosedBy")
                        .WithMany()
                        .HasForeignKey("ClosedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.User", "DismissedBy")
                        .WithMany()
                        .HasForeignKey("DismissedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.User", "EscalatedBy")
                        .WithMany()
                        .HasForeignKey("EscalatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.ProjectHealthRisk", "ProjectHealthRisk")
                        .WithMany("Alerts")
                        .HasForeignKey("ProjectHealthRiskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClosedBy");

                    b.Navigation("DismissedBy");

                    b.Navigation("EscalatedBy");

                    b.Navigation("ProjectHealthRisk");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertEventLog", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.AlertEventSubtype", "AlertEventSubtype")
                        .WithMany()
                        .HasForeignKey("AlertEventSubtypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.AlertEventType", "AlertEventType")
                        .WithMany()
                        .HasForeignKey("AlertEventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.Alert", "Alert")
                        .WithMany()
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.User", "LoggedBy")
                        .WithMany()
                        .HasForeignKey("LoggedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alert");

                    b.Navigation("AlertEventSubtype");

                    b.Navigation("AlertEventType");

                    b.Navigation("LoggedBy");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertEventSubtype", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.AlertEventType", "AlertEventType")
                        .WithMany("AlertEventSubtypes")
                        .HasForeignKey("AlertEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertEventType");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertNotHandledNotificationRecipient", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.Project", "Project")
                        .WithMany("AlertNotHandledNotificationRecipients")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertNotificationRecipient", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.GatewayModem", "GatewayModem")
                        .WithMany()
                        .HasForeignKey("GatewayModemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.Project", null)
                        .WithMany("AlertNotificationRecipients")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GatewayModem");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertReport", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.Alert", "Alert")
                        .WithMany("AlertReports")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.Report", "Report")
                        .WithMany("ReportAlerts")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alert");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.DataCollector", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.HeadSupervisorUser", "HeadSupervisor")
                        .WithMany()
                        .HasForeignKey("HeadSupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.Project", "Project")
                        .WithMany("DataCollectors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.SupervisorUser", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HeadSupervisor");

                    b.Navigation("Project");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.DataCollectorLocation", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.DataCollector", "DataCollector")
                        .WithMany("DataCollectorLocations")
                        .HasForeignKey("DataCollectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DataCollector");

                    b.Navigation("Village");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.DataCollectorNotDeployed", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.DataCollector", null)
                        .WithMany("DatesNotDeployed")
                        .HasForeignKey("DataCollectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.District", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.EidsrConfiguration", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.NationalSociety", "NationalSociety")
                        .WithOne("EidsrConfiguration")
                        .HasForeignKey("RX.Nyss.Data.Models.EidsrConfiguration", "NationalSocietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NationalSociety");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.EidsrOrganisationUnits", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.District", "District")
                        .WithOne("EidsrOrganisationUnits")
                        .HasForeignKey("RX.Nyss.Data.Models.EidsrOrganisationUnits", "DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.GatewayModem", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.GatewaySetting", "GatewaySetting")
                        .WithMany("Modems")
                        .HasForeignKey("GatewaySettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GatewaySetting");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.GatewaySetting", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.NationalSociety", "NationalSociety")
                        .WithMany()
                        .HasForeignKey("NationalSocietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NationalSociety");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HeadSupervisorUserAlertRecipient", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.AlertNotificationRecipient", "AlertNotificationRecipient")
                        .WithMany("HeadSupervisorUserAlertRecipients")
                        .HasForeignKey("AlertNotificationRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.HeadSupervisorUser", "HeadSupervisor")
                        .WithMany("HeadSupervisorUserAlertRecipients")
                        .HasForeignKey("HeadSupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlertNotificationRecipient");

                    b.Navigation("HeadSupervisor");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HeadSupervisorUserProject", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.HeadSupervisorUser", "HeadSupervisorUser")
                        .WithMany("HeadSupervisorUserProjects")
                        .HasForeignKey("HeadSupervisorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.Project", "Project")
                        .WithMany("HeadSupervisorUserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HeadSupervisorUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HealthRisk", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.AlertRule", "AlertRule")
                        .WithMany()
                        .HasForeignKey("AlertRuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AlertRule");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HealthRiskLanguageContent", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.ContentLanguage", "ContentLanguage")
                        .WithMany()
                        .HasForeignKey("ContentLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.HealthRisk", "HealthRisk")
                        .WithMany("LanguageContents")
                        .HasForeignKey("HealthRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentLanguage");

                    b.Navigation("HealthRisk");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HealthRiskSuspectedDisease", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.HealthRisk", "HealthRisk")
                        .WithMany("HealthRiskSuspectedDiseases")
                        .HasForeignKey("HealthRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.SuspectedDisease", "SuspectedDisease")
                        .WithMany("HealthRiskSuspectedDiseases")
                        .HasForeignKey("SuspectedDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthRisk");

                    b.Navigation("SuspectedDisease");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Localization", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.ApplicationLanguage", "ApplicationLanguage")
                        .WithMany()
                        .HasForeignKey("ApplicationLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationLanguage");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.LocalizedTemplate", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.ApplicationLanguage", "ApplicationLanguage")
                        .WithMany()
                        .HasForeignKey("ApplicationLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationLanguage");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.NationalSociety", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.ContentLanguage", "ContentLanguage")
                        .WithMany()
                        .HasForeignKey("ContentLanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.Organization", "DefaultOrganization")
                        .WithMany()
                        .HasForeignKey("DefaultOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ContentLanguage");

                    b.Navigation("Country");

                    b.Navigation("DefaultOrganization");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Notification", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Organization", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.User", "HeadManager")
                        .WithMany()
                        .HasForeignKey("HeadManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.NationalSociety", "NationalSociety")
                        .WithMany("Organizations")
                        .HasForeignKey("NationalSocietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.User", "PendingHeadManager")
                        .WithMany()
                        .HasForeignKey("PendingHeadManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HeadManager");

                    b.Navigation("NationalSociety");

                    b.Navigation("PendingHeadManager");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Project", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.NationalSociety", "NationalSociety")
                        .WithMany()
                        .HasForeignKey("NationalSocietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NationalSociety");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ProjectHealthRisk", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.AlertRule", "AlertRule")
                        .WithMany()
                        .HasForeignKey("AlertRuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.HealthRisk", "HealthRisk")
                        .WithMany()
                        .HasForeignKey("HealthRiskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.Project", "Project")
                        .WithMany("ProjectHealthRisks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlertRule");

                    b.Navigation("HealthRisk");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ProjectHealthRiskAlertRecipient", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.AlertNotificationRecipient", "AlertNotificationRecipient")
                        .WithMany("ProjectHealthRiskAlertRecipients")
                        .HasForeignKey("AlertNotificationRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.ProjectHealthRisk", "ProjectHealthRisk")
                        .WithMany("ProjectHealthRiskAlertRecipients")
                        .HasForeignKey("ProjectHealthRiskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlertNotificationRecipient");

                    b.Navigation("ProjectHealthRisk");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ProjectOrganization", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationProjects")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.Project", "Project")
                        .WithMany("ProjectOrganizations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.RawReport", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.DataCollector", "DataCollector")
                        .WithMany("RawReports")
                        .HasForeignKey("DataCollectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.NationalSociety", "NationalSociety")
                        .WithMany("RawReports")
                        .HasForeignKey("NationalSocietyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.Report", "Report")
                        .WithOne("RawReport")
                        .HasForeignKey("RX.Nyss.Data.Models.RawReport", "ReportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DataCollector");

                    b.Navigation("NationalSociety");

                    b.Navigation("Report");

                    b.Navigation("Village");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Region", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.NationalSociety", "NationalSociety")
                        .WithMany()
                        .HasForeignKey("NationalSocietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NationalSociety");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Report", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.User", "AcceptedBy")
                        .WithMany()
                        .HasForeignKey("AcceptedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.User", "CorrectedBy")
                        .WithMany()
                        .HasForeignKey("CorrectedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.DataCollector", "DataCollector")
                        .WithMany("Reports")
                        .HasForeignKey("DataCollectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.ProjectHealthRisk", "ProjectHealthRisk")
                        .WithMany("Reports")
                        .HasForeignKey("ProjectHealthRiskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.User", "RejectedBy")
                        .WithMany()
                        .HasForeignKey("RejectedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.User", "ResetBy")
                        .WithMany()
                        .HasForeignKey("ResetById");

                    b.OwnsOne("RX.Nyss.Data.Models.DataCollectionPointCase", "DataCollectionPointCase", b1 =>
                        {
                            b1.Property<int>("ReportId")
                                .HasColumnType("int");

                            b1.Property<int?>("DeathCount")
                                .HasColumnType("int");

                            b1.Property<int?>("FromOtherVillagesCount")
                                .HasColumnType("int");

                            b1.Property<int?>("ReferredCount")
                                .HasColumnType("int");

                            b1.HasKey("ReportId");

                            b1.ToTable("Reports", "nyss");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.OwnsOne("RX.Nyss.Data.Models.ReportCase", "ReportedCase", b1 =>
                        {
                            b1.Property<int>("ReportId")
                                .HasColumnType("int");

                            b1.Property<int?>("CountFemalesAtLeastFive")
                                .HasColumnType("int");

                            b1.Property<int?>("CountFemalesBelowFive")
                                .HasColumnType("int");

                            b1.Property<int?>("CountMalesAtLeastFive")
                                .HasColumnType("int");

                            b1.Property<int?>("CountMalesBelowFive")
                                .HasColumnType("int");

                            b1.Property<int?>("CountUnspecifiedSexAndAge")
                                .HasColumnType("int");

                            b1.HasKey("ReportId");

                            b1.ToTable("Reports", "nyss");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.Navigation("AcceptedBy");

                    b.Navigation("CorrectedBy");

                    b.Navigation("DataCollectionPointCase");

                    b.Navigation("DataCollector");

                    b.Navigation("ProjectHealthRisk");

                    b.Navigation("RejectedBy");

                    b.Navigation("ReportedCase");

                    b.Navigation("ResetBy");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SupervisorUserAlertRecipient", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.AlertNotificationRecipient", "AlertNotificationRecipient")
                        .WithMany("SupervisorAlertRecipients")
                        .HasForeignKey("AlertNotificationRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.SupervisorUser", "Supervisor")
                        .WithMany("SupervisorAlertRecipients")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlertNotificationRecipient");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SupervisorUserProject", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.Project", "Project")
                        .WithMany("SupervisorUserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.SupervisorUser", "SupervisorUser")
                        .WithMany("SupervisorUserProjects")
                        .HasForeignKey("SupervisorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("SupervisorUser");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SuspectedDiseaseLanguageContent", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.ContentLanguage", "ContentLanguage")
                        .WithMany()
                        .HasForeignKey("ContentLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.SuspectedDisease", "SuspectedDisease")
                        .WithMany("LanguageContents")
                        .HasForeignKey("SuspectedDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentLanguage");

                    b.Navigation("SuspectedDisease");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.TechnicalAdvisorUserGatewayModem", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.GatewayModem", "GatewayModem")
                        .WithMany()
                        .HasForeignKey("GatewayModemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.TechnicalAdvisorUser", "TechnicalAdvisorUser")
                        .WithMany("TechnicalAdvisorUserGatewayModems")
                        .HasForeignKey("TechnicalAdvisorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GatewayModem");

                    b.Navigation("TechnicalAdvisorUser");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.User", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.ApplicationLanguage", "ApplicationLanguage")
                        .WithMany()
                        .HasForeignKey("ApplicationLanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationLanguage");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.UserNationalSociety", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.NationalSociety", "NationalSociety")
                        .WithMany("NationalSocietyUsers")
                        .HasForeignKey("NationalSocietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RX.Nyss.Data.Models.Organization", "Organization")
                        .WithMany("NationalSocietyUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.User", "User")
                        .WithMany("UserNationalSocieties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NationalSociety");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Village", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.District", "District")
                        .WithMany("Villages")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Zone", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.Village", "Village")
                        .WithMany("Zones")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Village");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HeadSupervisorUser", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.Project", "CurrentProject")
                        .WithMany()
                        .HasForeignKey("CurrentProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Users_Project_CurrentProjectId");

                    b.HasOne("RX.Nyss.Data.Models.GatewayModem", "Modem")
                        .WithMany()
                        .HasForeignKey("ModemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Users_GatewayModem_GatewayModemId");

                    b.Navigation("CurrentProject");

                    b.Navigation("Modem");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ManagerUser", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.GatewayModem", "Modem")
                        .WithMany()
                        .HasForeignKey("ModemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Users_GatewayModem_GatewayModemId");

                    b.Navigation("Modem");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SupervisorUser", b =>
                {
                    b.HasOne("RX.Nyss.Data.Models.Project", "CurrentProject")
                        .WithMany()
                        .HasForeignKey("CurrentProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Users_Project_CurrentProjectId");

                    b.HasOne("RX.Nyss.Data.Models.HeadSupervisorUser", "HeadSupervisor")
                        .WithMany()
                        .HasForeignKey("HeadSupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RX.Nyss.Data.Models.GatewayModem", "Modem")
                        .WithMany()
                        .HasForeignKey("ModemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Users_GatewayModem_GatewayModemId");

                    b.Navigation("CurrentProject");

                    b.Navigation("HeadSupervisor");

                    b.Navigation("Modem");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Alert", b =>
                {
                    b.Navigation("AlertReports");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertEventType", b =>
                {
                    b.Navigation("AlertEventSubtypes");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.AlertNotificationRecipient", b =>
                {
                    b.Navigation("HeadSupervisorUserAlertRecipients");

                    b.Navigation("ProjectHealthRiskAlertRecipients");

                    b.Navigation("SupervisorAlertRecipients");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.DataCollector", b =>
                {
                    b.Navigation("DataCollectorLocations");

                    b.Navigation("DatesNotDeployed");

                    b.Navigation("RawReports");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.District", b =>
                {
                    b.Navigation("EidsrOrganisationUnits");

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.GatewaySetting", b =>
                {
                    b.Navigation("Modems");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HealthRisk", b =>
                {
                    b.Navigation("HealthRiskSuspectedDiseases");

                    b.Navigation("LanguageContents");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.NationalSociety", b =>
                {
                    b.Navigation("EidsrConfiguration");

                    b.Navigation("NationalSocietyUsers");

                    b.Navigation("Organizations");

                    b.Navigation("RawReports");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Organization", b =>
                {
                    b.Navigation("NationalSocietyUsers");

                    b.Navigation("OrganizationProjects");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Project", b =>
                {
                    b.Navigation("AlertNotHandledNotificationRecipients");

                    b.Navigation("AlertNotificationRecipients");

                    b.Navigation("DataCollectors");

                    b.Navigation("HeadSupervisorUserProjects");

                    b.Navigation("ProjectHealthRisks");

                    b.Navigation("ProjectOrganizations");

                    b.Navigation("SupervisorUserProjects");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.ProjectHealthRisk", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("ProjectHealthRiskAlertRecipients");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Region", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Report", b =>
                {
                    b.Navigation("RawReport");

                    b.Navigation("ReportAlerts");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SuspectedDisease", b =>
                {
                    b.Navigation("HealthRiskSuspectedDiseases");

                    b.Navigation("LanguageContents");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.User", b =>
                {
                    b.Navigation("UserNationalSocieties");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.Village", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.HeadSupervisorUser", b =>
                {
                    b.Navigation("HeadSupervisorUserAlertRecipients");

                    b.Navigation("HeadSupervisorUserProjects");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.SupervisorUser", b =>
                {
                    b.Navigation("SupervisorAlertRecipients");

                    b.Navigation("SupervisorUserProjects");
                });

            modelBuilder.Entity("RX.Nyss.Data.Models.TechnicalAdvisorUser", b =>
                {
                    b.Navigation("TechnicalAdvisorUserGatewayModems");
                });
#pragma warning restore 612, 618
        }
    }
}
